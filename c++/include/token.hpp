#ifndef TOKEN_HPP
#define TOKEN_HPP

#include <iostream>
#include <vector>

using namespace std;

enum TokenType {
	OPERATOR	= 0b100000000000000000000000000000000,
	PLUS		= 0b110000000000000000000000000000000, // +
	MINUS		= 0b101000000000000000000000000000000, // -
	MULT		= 0b100100000000000000000000000000000, // *
	DIV			= 0b100010000000000000000000000000000, // /
	MOD			= 0b100001000000000000000000000000000, // %
	POWER		= 0b100000100000000000000000000000000, // ^
	MATMULT		= 0b100000010000000000000000000000000, // **

	OPERAND		= 0b00000000100000000000000000000000,
	I			= 0b00000000110000000000000000000000, // i
	VAR			= 0b00000000101000000000000000000000, // [a-zA-Z]
	NUMBER		= 0b00000000100100000000000000000000, // [0-9].

	LPAR		= 0b000000000000100000000000000000000, // (
	RPAR		= 0b000000000000010000000000000000000, // )

	LHOOK		= 0b000000000000001000000000000000000, // [
	RHOOK		= 0b000000000000000100000000000000000, // ]
	COMMA		= 0b000000000000000010000000000000000, // ,
	SEMICOLON	= 0b000000000000000001000000000000000, // ;

	EQUAL		= 0b000000000000000000100000000000000, // =
	QUESTION	= 0b000000000000000000010000000000000, // ?

	SUBTREE		= 0b000000000000000000001000000000000,
	NONE		= 0b000000000000000000000100000000000,
};

string tokenTypeToStr(TokenType type);

struct Token;
typedef vector<Token> TokenList;

struct Token {
	TokenType type;
	string raw;

	TokenList tokens;

	Token();
	Token(char _c, TokenType _type);
	Token(string _str, TokenType _type);

	Token(TokenList::iterator it, TokenList::iterator ite, string _raw);
	Token(TokenList const &tokens, string _raw);
};


// struct SubTree: public Token {
// 	TokenList tokens;

// 	SubTree(TokenList::iterator it, TokenList::iterator ite, string raw);
// 	SubTree(TokenList const &tokens, string raw);
// };

void log(TokenList list);

#endif