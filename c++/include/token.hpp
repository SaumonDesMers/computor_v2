#ifndef TOKEN_HPP
#define TOKEN_HPP

#include <iostream>
#include <vector>

using namespace std;

enum TokenType {
	OPERATOR	= 0b11111110000000000000000000000000, // operator mask
	PLUS		= 0b10000000000000000000001000000000, // +
	MINUS		= 0b01000000000000000000001000000000, // -
	MULT		= 0b00100000000000000000010000000000, // *
	DIV			= 0b00010000000000000000010000000000, // /
	MOD			= 0b00001000000000000000010000000000, // %
	MATMULT		= 0b00000100000000000000010000000000, // **
	POWER		= 0b00000010000000000000100000000000, // ^

	OPERAND		= 0b00000001110000000000000000000000, // operand mask
	I			= 0b00000001000000000000000000000000, // i
	VAR			= 0b00000000100000000000000000000000, // [a-zA-Z]
	NUMBER		= 0b00000000010000000000000000000000, // [0-9].

	BRACE		= 0b00000000001100000000000000000000, // brace mask
	LBRACE		= 0b00000000001000000000000000000000, // (
	RBRACE		= 0b00000000000100000000000000000000, // )

	LHOOK		= 0b00000000000010000000000000000000, // [
	RHOOK		= 0b00000000000001000000000000000000, // ]
	COMMA		= 0b00000000000000100000000000000000, // ,
	SEMICOLON	= 0b00000000000000010000000000000000, // ;

	EQUAL		= 0b00000000000000001000000000000000, // =
	QUESTION	= 0b00000000000000000100000000000000, // ?

	SUBTREE		= 0b00000000000000000010000000000000,
	NONE		= 0b00000000000000000001000000000000,
};

#define PRIORITY 0b00000000000000000000111000000000 // operator priority mask
#define priority(type) (type & PRIORITY)

string tokenTypeToStr(TokenType type);

struct Token;
typedef vector<Token> TokenList;

struct Token {
	TokenType type;
	string raw;
	int index;

	Token();
	Token(char _c, int _index, TokenType _type);
	Token(string _str, int _index, TokenType _type);
};

void log(TokenList list);

#endif